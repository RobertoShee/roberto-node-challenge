import { spawn, ChildProcess } from 'child_process';
import { setTimeout } from 'timers/promises';

async function testGracefulShutdown(): Promise<void> {
    console.log('üß™ Iniciando test de graceful shutdown...');
    
    return new Promise((resolve, reject) => {
        let serverProcess: ChildProcess;
        let shutdownStarted = false;
        let shutdownCompleted = false;
        const timeout = 10000;

        try {
            console.log('üöÄ Iniciando servidor...');
            serverProcess = spawn('yarn', ['dev'], {
                cwd: process.cwd(),
                stdio: 'pipe',
                shell: true
            });

            const startTime = Date.now();
            
            serverProcess.stdout?.on('data', (data) => {
                const output = data.toString();
                console.log('üìã Server output:', output.trim());
                
                if (output.includes('API escuchando en')) {
                    console.log('‚úÖ Servidor iniciado correctamente');
                    
                    setTimeout(2000).then(() => {
                        console.log('üõë Enviando se√±al SIGINT para graceful shutdown...');
                        shutdownStarted = true;
                        serverProcess.kill('SIGINT');
                    });
                }
                
                if (output.includes('Se√±al SIGINT recibida')) {
                    console.log('‚úÖ Graceful shutdown iniciado correctamente');
                }
                
                if (output.includes('Graceful shutdown completado')) {
                    shutdownCompleted = true;
                    console.log('‚úÖ Graceful shutdown completado exitosamente');
                }
            });

            serverProcess.stderr?.on('data', (data) => {
                console.log('‚ùå Server error:', data.toString());
            });

            serverProcess.on('exit', (code, signal) => {
                const duration = Date.now() - startTime;
                console.log(`üîö Servidor terminado - C√≥digo: ${code}, Se√±al: ${signal}, Duraci√≥n: ${duration}ms`);
                
                if (shutdownStarted) {
                    console.log('‚úÖ Test de graceful shutdown: EXITOSO');
                    console.log(`   üìä Tiempo total de shutdown: ${duration - 2000}ms`);
                    resolve();
                } else {
                    reject(new Error('El servidor termin√≥ antes de completar el test'));
                }
            });

            setTimeout(timeout).then(() => {
                if (!shutdownCompleted) {
                    console.log('‚è∞ Timeout del test, terminando servidor...');
                    serverProcess.kill('SIGKILL');
                    reject(new Error(`Test timeout despu√©s de ${timeout}ms`));
                }
            });

        } catch (error) {
            console.error('üí• Error en test de graceful shutdown:', error);
            reject(error);
        }
    });
}

testGracefulShutdown()
    .then(() => {
        console.log('\nüéâ Test de graceful shutdown completado exitosamente');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå Test de graceful shutdown fall√≥:', error);
        process.exit(1);
    });
